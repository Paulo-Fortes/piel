{"ast":null,"code":"import { createAnatomy } from '@zag-js/anatomy';\nimport { createMachine } from '@zag-js/core';\nimport { setRafTimeout, setRafInterval, createSplitProps, isObject } from '@zag-js/utils';\nimport { createProps } from '@zag-js/types';\n\n// src/timer.anatomy.ts\nvar anatomy = createAnatomy(\"timer\").parts(\"root\", \"area\", \"control\", \"item\", \"itemValue\", \"itemLabel\", \"actionTrigger\", \"separator\");\nvar parts = anatomy.build();\n\n// src/timer.dom.ts\nvar getRootId = ctx => ctx.ids?.root ?? `timer:${ctx.id}:root`;\nvar getAreaId = ctx => ctx.ids?.area ?? `timer:${ctx.id}:area`;\n\n// src/timer.connect.ts\nvar validActions = /* @__PURE__ */new Set([\"start\", \"pause\", \"resume\", \"reset\"]);\nfunction connect(service, normalize) {\n  const {\n    state,\n    send,\n    computed,\n    scope\n  } = service;\n  const running = state.matches(\"running\");\n  const paused = state.matches(\"paused\");\n  const time = computed(\"time\");\n  const formattedTime = computed(\"formattedTime\");\n  const progressPercent = computed(\"progressPercent\");\n  return {\n    running,\n    paused,\n    time,\n    formattedTime,\n    progressPercent,\n    start() {\n      send({\n        type: \"START\"\n      });\n    },\n    pause() {\n      send({\n        type: \"PAUSE\"\n      });\n    },\n    resume() {\n      send({\n        type: \"RESUME\"\n      });\n    },\n    reset() {\n      send({\n        type: \"RESET\"\n      });\n    },\n    restart() {\n      send({\n        type: \"RESTART\"\n      });\n    },\n    getRootProps() {\n      return normalize.element({\n        id: getRootId(scope),\n        ...parts.root.attrs\n      });\n    },\n    getAreaProps() {\n      return normalize.element({\n        role: \"timer\",\n        id: getAreaId(scope),\n        \"aria-label\": `${time.days} days ${formattedTime.hours}:${formattedTime.minutes}:${formattedTime.seconds}`,\n        \"aria-atomic\": true,\n        ...parts.area.attrs\n      });\n    },\n    getControlProps() {\n      return normalize.element({\n        ...parts.control.attrs\n      });\n    },\n    getItemProps(props2) {\n      const value = time[props2.type];\n      return normalize.element({\n        ...parts.item.attrs,\n        \"data-type\": props2.type,\n        style: {\n          \"--value\": value\n        }\n      });\n    },\n    getItemLabelProps(props2) {\n      return normalize.element({\n        ...parts.itemLabel.attrs,\n        \"data-type\": props2.type\n      });\n    },\n    getItemValueProps(props2) {\n      return normalize.element({\n        ...parts.itemValue.attrs,\n        \"data-type\": props2.type\n      });\n    },\n    getSeparatorProps() {\n      return normalize.element({\n        \"aria-hidden\": true,\n        ...parts.separator.attrs\n      });\n    },\n    getActionTriggerProps(props2) {\n      if (!validActions.has(props2.action)) {\n        throw new Error(`[zag-js] Invalid action: ${props2.action}. Must be one of: ${Array.from(validActions).join(\", \")}`);\n      }\n      return normalize.button({\n        ...parts.actionTrigger.attrs,\n        hidden: (() => {\n          switch (props2.action) {\n            case \"start\":\n              return running || paused;\n            case \"pause\":\n              return !running;\n            case \"reset\":\n              return !running && !paused;\n            case \"resume\":\n              return !paused;\n            default:\n              return;\n          }\n        })(),\n        type: \"button\",\n        onClick(event) {\n          if (event.defaultPrevented) return;\n          send({\n            type: props2.action.toUpperCase()\n          });\n        }\n      });\n    }\n  };\n}\nvar machine = createMachine({\n  props({\n    props: props2\n  }) {\n    return {\n      interval: 1e3,\n      ...props2\n    };\n  },\n  initialState({\n    prop\n  }) {\n    return prop(\"autoStart\") ? \"running\" : \"idle\";\n  },\n  context({\n    prop,\n    bindable\n  }) {\n    return {\n      currentMs: bindable(() => ({\n        defaultValue: prop(\"startMs\") ?? 0\n      }))\n    };\n  },\n  watch({\n    track,\n    send,\n    prop\n  }) {\n    track([() => prop(\"startMs\")], () => {\n      send({\n        type: \"RESTART\"\n      });\n    });\n  },\n  on: {\n    RESTART: {\n      target: \"running:temp\",\n      actions: [\"resetTime\"]\n    }\n  },\n  computed: {\n    time: ({\n      context\n    }) => msToTime(context.get(\"currentMs\")),\n    formattedTime: ({\n      computed\n    }) => formatTime(computed(\"time\")),\n    progressPercent: ({\n      context,\n      prop\n    }) => {\n      const targetMs = prop(\"targetMs\");\n      if (targetMs == null) return 0;\n      return toPercent(context.get(\"currentMs\"), prop(\"startMs\") ?? 0, targetMs);\n    }\n  },\n  states: {\n    idle: {\n      on: {\n        START: {\n          target: \"running\"\n        },\n        RESET: {\n          actions: [\"resetTime\"]\n        }\n      }\n    },\n    \"running:temp\": {\n      effects: [\"waitForNextTick\"],\n      on: {\n        CONTINUE: {\n          target: \"running\"\n        }\n      }\n    },\n    running: {\n      effects: [\"keepTicking\"],\n      on: {\n        PAUSE: {\n          target: \"paused\"\n        },\n        TICK: [{\n          target: \"idle\",\n          guard: \"hasReachedTarget\",\n          actions: [\"invokeOnComplete\"]\n        }, {\n          actions: [\"updateTime\", \"invokeOnTick\"]\n        }],\n        RESET: {\n          actions: [\"resetTime\"]\n        }\n      }\n    },\n    paused: {\n      on: {\n        RESUME: {\n          target: \"running\"\n        },\n        RESET: {\n          target: \"idle\",\n          actions: [\"resetTime\"]\n        }\n      }\n    }\n  },\n  implementations: {\n    effects: {\n      keepTicking({\n        prop,\n        send\n      }) {\n        return setRafInterval(({\n          deltaMs\n        }) => {\n          send({\n            type: \"TICK\",\n            deltaMs\n          });\n        }, prop(\"interval\"));\n      },\n      waitForNextTick({\n        send\n      }) {\n        return setRafTimeout(() => {\n          send({\n            type: \"CONTINUE\"\n          });\n        }, 0);\n      }\n    },\n    actions: {\n      updateTime({\n        context,\n        prop,\n        event\n      }) {\n        const sign = prop(\"countdown\") ? -1 : 1;\n        const deltaMs = roundToInterval(event.deltaMs, prop(\"interval\"));\n        context.set(\"currentMs\", prev => prev + sign * deltaMs);\n      },\n      resetTime({\n        context,\n        prop\n      }) {\n        let targetMs = prop(\"targetMs\");\n        if (targetMs == null && prop(\"countdown\")) targetMs = 0;\n        context.set(\"currentMs\", prop(\"startMs\") ?? 0);\n      },\n      invokeOnTick({\n        context,\n        prop,\n        computed\n      }) {\n        prop(\"onTick\")?.({\n          value: context.get(\"currentMs\"),\n          time: computed(\"time\"),\n          formattedTime: computed(\"formattedTime\")\n        });\n      },\n      invokeOnComplete({\n        prop\n      }) {\n        prop(\"onComplete\")?.();\n      }\n    },\n    guards: {\n      hasReachedTarget: ({\n        context,\n        prop\n      }) => {\n        let targetMs = prop(\"targetMs\");\n        if (targetMs == null && prop(\"countdown\")) targetMs = 0;\n        if (targetMs == null) return false;\n        return context.get(\"currentMs\") === targetMs;\n      }\n    }\n  }\n});\nfunction msToTime(ms) {\n  const milliseconds = ms % 1e3;\n  const seconds = Math.floor(ms / 1e3) % 60;\n  const minutes = Math.floor(ms / (1e3 * 60)) % 60;\n  const hours = Math.floor(ms / (1e3 * 60 * 60)) % 24;\n  const days = Math.floor(ms / (1e3 * 60 * 60 * 24));\n  return {\n    days,\n    hours,\n    minutes,\n    seconds,\n    milliseconds\n  };\n}\nfunction toPercent(value, minValue, maxValue) {\n  return (value - minValue) / (maxValue - minValue);\n}\nfunction padStart(num, size = 2) {\n  return num.toString().padStart(size, \"0\");\n}\nfunction roundToInterval(value, interval) {\n  return Math.round(value / interval) * interval;\n}\nfunction formatTime(time) {\n  const {\n    days,\n    hours,\n    minutes,\n    seconds\n  } = time;\n  return {\n    days: padStart(days),\n    hours: padStart(hours),\n    minutes: padStart(minutes),\n    seconds: padStart(seconds),\n    milliseconds: time.milliseconds.toString()\n  };\n}\nvar segments = /* @__PURE__ */new Set([\"days\", \"hours\", \"minutes\", \"seconds\"]);\nfunction isTimeSegment(date) {\n  return isObject(date) && Object.keys(date).some(key => segments.has(key));\n}\nfunction parse(date) {\n  if (typeof date === \"string\") {\n    return new Date(date).getTime();\n  }\n  if (isTimeSegment(date)) {\n    const {\n      days = 0,\n      hours = 0,\n      minutes = 0,\n      seconds = 0,\n      milliseconds = 0\n    } = date;\n    const value = (days * 24 * 60 * 60 + hours * 60 * 60 + minutes * 60 + seconds) * 1e3;\n    return value + milliseconds;\n  }\n  throw new Error(\"Invalid date\");\n}\nvar props = createProps()([\"autoStart\", \"countdown\", \"getRootNode\", \"id\", \"ids\", \"interval\", \"onComplete\", \"onTick\", \"startMs\", \"targetMs\"]);\nvar splitProps = createSplitProps(props);\nexport { anatomy, connect, machine, parse, props, splitProps };","map":{"version":3,"names":["createAnatomy","createMachine","setRafTimeout","setRafInterval","createSplitProps","isObject","createProps","anatomy","parts","build","getRootId","ctx","ids","root","id","getAreaId","area","validActions","Set","connect","service","normalize","state","send","computed","scope","running","matches","paused","time","formattedTime","progressPercent","start","type","pause","resume","reset","restart","getRootProps","element","attrs","getAreaProps","role","days","hours","minutes","seconds","getControlProps","control","getItemProps","props2","value","item","style","getItemLabelProps","itemLabel","getItemValueProps","itemValue","getSeparatorProps","separator","getActionTriggerProps","has","action","Error","Array","from","join","button","actionTrigger","hidden","onClick","event","defaultPrevented","toUpperCase","machine","props","interval","initialState","prop","context","bindable","currentMs","defaultValue","watch","track","on","RESTART","target","actions","msToTime","get","formatTime","targetMs","toPercent","states","idle","START","RESET","effects","CONTINUE","PAUSE","TICK","guard","RESUME","implementations","keepTicking","deltaMs","waitForNextTick","updateTime","sign","roundToInterval","set","prev","resetTime","invokeOnTick","invokeOnComplete","guards","hasReachedTarget","ms","milliseconds","Math","floor","minValue","maxValue","padStart","num","size","toString","round","segments","isTimeSegment","date","Object","keys","some","key","parse","Date","getTime","splitProps"],"sources":["C:/Users/Samsung/Desktop/TEC DESARROLLO DE SOFTWARE/5º CUATRIMESTRE/piel/client/node_modules/@zag-js/timer/dist/index.mjs"],"sourcesContent":["import { createAnatomy } from '@zag-js/anatomy';\r\nimport { createMachine } from '@zag-js/core';\r\nimport { setRafTimeout, setRafInterval, createSplitProps, isObject } from '@zag-js/utils';\r\nimport { createProps } from '@zag-js/types';\r\n\r\n// src/timer.anatomy.ts\r\nvar anatomy = createAnatomy(\"timer\").parts(\r\n  \"root\",\r\n  \"area\",\r\n  \"control\",\r\n  \"item\",\r\n  \"itemValue\",\r\n  \"itemLabel\",\r\n  \"actionTrigger\",\r\n  \"separator\"\r\n);\r\nvar parts = anatomy.build();\r\n\r\n// src/timer.dom.ts\r\nvar getRootId = (ctx) => ctx.ids?.root ?? `timer:${ctx.id}:root`;\r\nvar getAreaId = (ctx) => ctx.ids?.area ?? `timer:${ctx.id}:area`;\r\n\r\n// src/timer.connect.ts\r\nvar validActions = /* @__PURE__ */ new Set([\"start\", \"pause\", \"resume\", \"reset\"]);\r\nfunction connect(service, normalize) {\r\n  const { state, send, computed, scope } = service;\r\n  const running = state.matches(\"running\");\r\n  const paused = state.matches(\"paused\");\r\n  const time = computed(\"time\");\r\n  const formattedTime = computed(\"formattedTime\");\r\n  const progressPercent = computed(\"progressPercent\");\r\n  return {\r\n    running,\r\n    paused,\r\n    time,\r\n    formattedTime,\r\n    progressPercent,\r\n    start() {\r\n      send({ type: \"START\" });\r\n    },\r\n    pause() {\r\n      send({ type: \"PAUSE\" });\r\n    },\r\n    resume() {\r\n      send({ type: \"RESUME\" });\r\n    },\r\n    reset() {\r\n      send({ type: \"RESET\" });\r\n    },\r\n    restart() {\r\n      send({ type: \"RESTART\" });\r\n    },\r\n    getRootProps() {\r\n      return normalize.element({\r\n        id: getRootId(scope),\r\n        ...parts.root.attrs\r\n      });\r\n    },\r\n    getAreaProps() {\r\n      return normalize.element({\r\n        role: \"timer\",\r\n        id: getAreaId(scope),\r\n        \"aria-label\": `${time.days} days ${formattedTime.hours}:${formattedTime.minutes}:${formattedTime.seconds}`,\r\n        \"aria-atomic\": true,\r\n        ...parts.area.attrs\r\n      });\r\n    },\r\n    getControlProps() {\r\n      return normalize.element({\r\n        ...parts.control.attrs\r\n      });\r\n    },\r\n    getItemProps(props2) {\r\n      const value = time[props2.type];\r\n      return normalize.element({\r\n        ...parts.item.attrs,\r\n        \"data-type\": props2.type,\r\n        style: {\r\n          \"--value\": value\r\n        }\r\n      });\r\n    },\r\n    getItemLabelProps(props2) {\r\n      return normalize.element({\r\n        ...parts.itemLabel.attrs,\r\n        \"data-type\": props2.type\r\n      });\r\n    },\r\n    getItemValueProps(props2) {\r\n      return normalize.element({\r\n        ...parts.itemValue.attrs,\r\n        \"data-type\": props2.type\r\n      });\r\n    },\r\n    getSeparatorProps() {\r\n      return normalize.element({\r\n        \"aria-hidden\": true,\r\n        ...parts.separator.attrs\r\n      });\r\n    },\r\n    getActionTriggerProps(props2) {\r\n      if (!validActions.has(props2.action)) {\r\n        throw new Error(\r\n          `[zag-js] Invalid action: ${props2.action}. Must be one of: ${Array.from(validActions).join(\", \")}`\r\n        );\r\n      }\r\n      return normalize.button({\r\n        ...parts.actionTrigger.attrs,\r\n        hidden: (() => {\r\n          switch (props2.action) {\r\n            case \"start\":\r\n              return running || paused;\r\n            case \"pause\":\r\n              return !running;\r\n            case \"reset\":\r\n              return !running && !paused;\r\n            case \"resume\":\r\n              return !paused;\r\n            default:\r\n              return;\r\n          }\r\n        })(),\r\n        type: \"button\",\r\n        onClick(event) {\r\n          if (event.defaultPrevented) return;\r\n          send({ type: props2.action.toUpperCase() });\r\n        }\r\n      });\r\n    }\r\n  };\r\n}\r\nvar machine = createMachine({\r\n  props({ props: props2 }) {\r\n    return {\r\n      interval: 1e3,\r\n      ...props2\r\n    };\r\n  },\r\n  initialState({ prop }) {\r\n    return prop(\"autoStart\") ? \"running\" : \"idle\";\r\n  },\r\n  context({ prop, bindable }) {\r\n    return {\r\n      currentMs: bindable(() => ({\r\n        defaultValue: prop(\"startMs\") ?? 0\r\n      }))\r\n    };\r\n  },\r\n  watch({ track, send, prop }) {\r\n    track([() => prop(\"startMs\")], () => {\r\n      send({ type: \"RESTART\" });\r\n    });\r\n  },\r\n  on: {\r\n    RESTART: {\r\n      target: \"running:temp\",\r\n      actions: [\"resetTime\"]\r\n    }\r\n  },\r\n  computed: {\r\n    time: ({ context }) => msToTime(context.get(\"currentMs\")),\r\n    formattedTime: ({ computed }) => formatTime(computed(\"time\")),\r\n    progressPercent: ({ context, prop }) => {\r\n      const targetMs = prop(\"targetMs\");\r\n      if (targetMs == null) return 0;\r\n      return toPercent(context.get(\"currentMs\"), prop(\"startMs\") ?? 0, targetMs);\r\n    }\r\n  },\r\n  states: {\r\n    idle: {\r\n      on: {\r\n        START: {\r\n          target: \"running\"\r\n        },\r\n        RESET: {\r\n          actions: [\"resetTime\"]\r\n        }\r\n      }\r\n    },\r\n    \"running:temp\": {\r\n      effects: [\"waitForNextTick\"],\r\n      on: {\r\n        CONTINUE: {\r\n          target: \"running\"\r\n        }\r\n      }\r\n    },\r\n    running: {\r\n      effects: [\"keepTicking\"],\r\n      on: {\r\n        PAUSE: {\r\n          target: \"paused\"\r\n        },\r\n        TICK: [\r\n          {\r\n            target: \"idle\",\r\n            guard: \"hasReachedTarget\",\r\n            actions: [\"invokeOnComplete\"]\r\n          },\r\n          {\r\n            actions: [\"updateTime\", \"invokeOnTick\"]\r\n          }\r\n        ],\r\n        RESET: {\r\n          actions: [\"resetTime\"]\r\n        }\r\n      }\r\n    },\r\n    paused: {\r\n      on: {\r\n        RESUME: {\r\n          target: \"running\"\r\n        },\r\n        RESET: {\r\n          target: \"idle\",\r\n          actions: [\"resetTime\"]\r\n        }\r\n      }\r\n    }\r\n  },\r\n  implementations: {\r\n    effects: {\r\n      keepTicking({ prop, send }) {\r\n        return setRafInterval(({ deltaMs }) => {\r\n          send({ type: \"TICK\", deltaMs });\r\n        }, prop(\"interval\"));\r\n      },\r\n      waitForNextTick({ send }) {\r\n        return setRafTimeout(() => {\r\n          send({ type: \"CONTINUE\" });\r\n        }, 0);\r\n      }\r\n    },\r\n    actions: {\r\n      updateTime({ context, prop, event }) {\r\n        const sign = prop(\"countdown\") ? -1 : 1;\r\n        const deltaMs = roundToInterval(event.deltaMs, prop(\"interval\"));\r\n        context.set(\"currentMs\", (prev) => prev + sign * deltaMs);\r\n      },\r\n      resetTime({ context, prop }) {\r\n        let targetMs = prop(\"targetMs\");\r\n        if (targetMs == null && prop(\"countdown\")) targetMs = 0;\r\n        context.set(\"currentMs\", prop(\"startMs\") ?? 0);\r\n      },\r\n      invokeOnTick({ context, prop, computed }) {\r\n        prop(\"onTick\")?.({\r\n          value: context.get(\"currentMs\"),\r\n          time: computed(\"time\"),\r\n          formattedTime: computed(\"formattedTime\")\r\n        });\r\n      },\r\n      invokeOnComplete({ prop }) {\r\n        prop(\"onComplete\")?.();\r\n      }\r\n    },\r\n    guards: {\r\n      hasReachedTarget: ({ context, prop }) => {\r\n        let targetMs = prop(\"targetMs\");\r\n        if (targetMs == null && prop(\"countdown\")) targetMs = 0;\r\n        if (targetMs == null) return false;\r\n        return context.get(\"currentMs\") === targetMs;\r\n      }\r\n    }\r\n  }\r\n});\r\nfunction msToTime(ms) {\r\n  const milliseconds = ms % 1e3;\r\n  const seconds = Math.floor(ms / 1e3) % 60;\r\n  const minutes = Math.floor(ms / (1e3 * 60)) % 60;\r\n  const hours = Math.floor(ms / (1e3 * 60 * 60)) % 24;\r\n  const days = Math.floor(ms / (1e3 * 60 * 60 * 24));\r\n  return {\r\n    days,\r\n    hours,\r\n    minutes,\r\n    seconds,\r\n    milliseconds\r\n  };\r\n}\r\nfunction toPercent(value, minValue, maxValue) {\r\n  return (value - minValue) / (maxValue - minValue);\r\n}\r\nfunction padStart(num, size = 2) {\r\n  return num.toString().padStart(size, \"0\");\r\n}\r\nfunction roundToInterval(value, interval) {\r\n  return Math.round(value / interval) * interval;\r\n}\r\nfunction formatTime(time) {\r\n  const { days, hours, minutes, seconds } = time;\r\n  return {\r\n    days: padStart(days),\r\n    hours: padStart(hours),\r\n    minutes: padStart(minutes),\r\n    seconds: padStart(seconds),\r\n    milliseconds: time.milliseconds.toString()\r\n  };\r\n}\r\nvar segments = /* @__PURE__ */ new Set([\"days\", \"hours\", \"minutes\", \"seconds\"]);\r\nfunction isTimeSegment(date) {\r\n  return isObject(date) && Object.keys(date).some((key) => segments.has(key));\r\n}\r\nfunction parse(date) {\r\n  if (typeof date === \"string\") {\r\n    return new Date(date).getTime();\r\n  }\r\n  if (isTimeSegment(date)) {\r\n    const { days = 0, hours = 0, minutes = 0, seconds = 0, milliseconds = 0 } = date;\r\n    const value = (days * 24 * 60 * 60 + hours * 60 * 60 + minutes * 60 + seconds) * 1e3;\r\n    return value + milliseconds;\r\n  }\r\n  throw new Error(\"Invalid date\");\r\n}\r\nvar props = createProps()([\r\n  \"autoStart\",\r\n  \"countdown\",\r\n  \"getRootNode\",\r\n  \"id\",\r\n  \"ids\",\r\n  \"interval\",\r\n  \"onComplete\",\r\n  \"onTick\",\r\n  \"startMs\",\r\n  \"targetMs\"\r\n]);\r\nvar splitProps = createSplitProps(props);\r\n\r\nexport { anatomy, connect, machine, parse, props, splitProps };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}